generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                  @id @default(cuid())
  email                    String                  @unique
  username                 String                  @unique
  password                 String
  firstName                String?
  lastName                 String?
  avatar                   String?
  bio                      String?
  phoneNumber              String?                 @unique
  ecocashNumber            String?
  mobileMoneyProvider      String?
  preferredLanguage        String                  @default("en")
  isStudent                Boolean                 @default(false)
  institution              String?
  dateOfBirth              DateTime?
  gender                   String?
  idNumber                 String?                 @unique
  isVerifiedID             Boolean                 @default(false)
  province                 String?
  city                     String?
  location                 String
  latitude                 Float?
  longitude                Float?
  points                   Int                     @default(0)
  rank                     Int?
  gamesPlayed              Int                     @default(0)
  gamesWon                 Int                     @default(0)
  winRate                  Float                   @default(0)
  isActive                 Boolean                 @default(true)
  isVerified               Boolean                 @default(false)
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  lastLogin                DateTime?
  permissions              String[]                @default([])
  refreshToken             String?
  refreshTokenExpiresAt    DateTime?
  role                     String                  @default("user")
  auditLogs                AuditLog[]              @relation("UserAuditLogs")
  challengesReceived       ChallengeInvitation[]   @relation("Challenged")
  challengesSent           ChallengeInvitation[]   @relation("Challenger")
  flaggedContentsModerated FlaggedContent[]        @relation("ContentModerator")
  flaggedContents          FlaggedContent[]        @relation("ContentReporter")
  sessions                 GameSession[]
  gameStats                GameStatistic[]
  playerMatches            Match[]                 @relation("Player1")
  opponentMatches          Match[]                 @relation("Player2")
  queueEntries             MatchmakingQueue[]
  payments                 Payment[]
  chatMessages             TournamentChatMessage[]
  tournamentEvents         TournamentEvent[]       @relation("UserTournamentEvents")
  tournamentHighlights     TournamentHighlight[]   @relation("UserTournamentHighlights")
  tournaments              TournamentPlayer[]
  tournamentSpectators     TournamentSpectator[]   @relation("UserTournamentSpectators")
  achievements             UserAchievement[]
  userActivities           UserActivity[]          @relation("UserActivities")
  userModerationsIssued    UserModeration[]        @relation("Moderator")
  userModerations          UserModeration[]        @relation("ModeratedUser")

  @@map("users")
}

model Game {
  id                   String                @id @default(cuid())
  name                 String                @unique
  description          String
  emoji                String
  minPlayers           Int                   @default(2)
  maxPlayers           Int                   @default(2)
  averageTimeMs        Int
  isActive             Boolean               @default(true)
  rules                Json?
  settings             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  challengeInvitations ChallengeInvitation[]
  sessions             GameSession[]
  statistics           GameStatistic[]
  matches              Match[]
  tournaments          Tournament[]

  @@map("games")
}

model Tournament {
  id                   String                  @id @default(cuid())
  title                String
  description          String?
  prizePool            Float                   @default(0)
  entryFee             Float                   @default(0)
  maxPlayers           Int                     @default(64)
  currentPlayers       Int                     @default(0)
  status               TournamentStatus        @default(OPEN)
  province             String?
  city                 String?
  location             String
  venue                String?
  isOnlineOnly         Boolean                 @default(true)
  latitude             Float?
  longitude            Float?
  radius               Float?
  targetAudience       String?
  sponsorName          String?
  minimumAge           Int?
  maxAge               Int?
  category             TournamentCategory?
  difficultyLevel      String?
  prizeBreakdown       Json?
  localCurrency        String                  @default("USD")
  platformFeeRate      Float                   @default(0.20)
  registrationStart    DateTime
  registrationEnd      DateTime
  startDate            DateTime
  endDate              DateTime?
  gameId               String
  bracketType          BracketType             @default(SINGLE_ELIMINATION)
  bracket              Json?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  matches              Match[]
  payments             Payment[]
  chatMessages         TournamentChatMessage[]
  tournamentEvents     TournamentEvent[]       @relation("TournamentEvents")
  tournamentHighlights TournamentHighlight[]   @relation("TournamentHighlights")
  players              TournamentPlayer[]
  tournamentSpectators TournamentSpectator[]   @relation("TournamentSpectators")
  game                 Game                    @relation(fields: [gameId], references: [id])

  @@map("tournaments")
}

model TournamentPlayer {
  id           String     @id @default(cuid())
  userId       String
  tournamentId String
  registeredAt DateTime   @default(now())
  joinedAt     DateTime   @default(now())
  isActive     Boolean    @default(true)
  seedNumber   Int?
  currentRound Int        @default(1)
  isEliminated Boolean    @default(false)
  placement    Int?
  prizeWon     Float      @default(0)
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tournamentId])
  @@map("tournament_players")
}

model Match {
  id                  String               @id @default(cuid())
  player1Id           String
  player2Id           String
  gameId              String
  tournamentId        String?
  round               Int?
  status              MatchStatus          @default(PENDING)
  result              MatchResult          @default(PENDING)
  winnerId            String?
  gameData            Json?
  duration            Int?
  createdAt           DateTime             @default(now())
  startedAt           DateTime?
  finishedAt          DateTime?
  challengeInvitation ChallengeInvitation?
  sessions            GameSession[]        @relation("Match_GameSession")
  game                Game                 @relation(fields: [gameId], references: [id])
  player1             User                 @relation("Player1", fields: [player1Id], references: [id])
  player2             User                 @relation("Player2", fields: [player2Id], references: [id])
  tournament          Tournament?          @relation(fields: [tournamentId], references: [id])

  @@map("matches")
}

model ChallengeInvitation {
  id           String          @id @default(cuid())
  challengerId String
  challengedId String
  gameId       String
  status       ChallengeStatus @default(PENDING)
  matchId      String?         @unique
  createdAt    DateTime        @default(now())
  expiresAt    DateTime
  respondedAt  DateTime?
  challenged   User            @relation("Challenged", fields: [challengedId], references: [id])
  challenger   User            @relation("Challenger", fields: [challengerId], references: [id])
  game         Game            @relation(fields: [gameId], references: [id])
  match        Match?          @relation(fields: [matchId], references: [id])

  @@map("challenge_invitations")
}

model GameSession {
  id          String      @id @default(cuid())
  userId      String
  gameId      String
  sessionType SessionType @default(PRACTICE)
  opponentId  String?
  isActive    Boolean     @default(true)
  gameState   Json?
  moves       Json[]
  result      MatchResult @default(PENDING)
  score       Int         @default(0)
  duration    Int?
  createdAt   DateTime    @default(now())
  startedAt   DateTime?
  finishedAt  DateTime?
  matchId     String?
  game        Game        @relation(fields: [gameId], references: [id])
  match       Match?      @relation("Match_GameSession", fields: [matchId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("game_sessions")
}

model GameStatistic {
  id            String   @id @default(cuid())
  userId        String
  gameId        String
  gamesPlayed   Int      @default(0)
  gamesWon      Int      @default(0)
  gamesLost     Int      @default(0)
  gamesDrawn    Int      @default(0)
  winRate       Float    @default(0)
  averageScore  Float    @default(0)
  bestScore     Int      @default(0)
  totalPlayTime Int      @default(0)
  currentRating Int      @default(1200)
  peakRating    Int      @default(1200)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@map("game_statistics")
}

model Achievement {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  icon             String?
  type             AchievementType
  requirements     Json
  points           Int               @default(0)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Payment {
  id                   String        @id @default(cuid())
  userId               String
  tournamentId         String?
  amount               Float
  currency             String        @default("USD")
  type                 PaymentType
  status               PaymentStatus @default(PENDING)
  pesePayTransactionId String?       @unique
  pesePayReference     String?
  paymentMethodCode    String?
  mobileMoneyNumber    String?
  paymentInitiatedAt   DateTime?
  paymentConfirmedAt   DateTime?
  paymentFailedAt      DateTime?
  failureReason        String?
  exchangeRate         Float?
  localAmount          Float?
  localCurrency        String?
  stripePaymentId      String?
  paypalPaymentId      String?
  metadata             Json?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  tournament           Tournament?   @relation(fields: [tournamentId], references: [id])
  user                 User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model ZimbabweLocation {
  id        String  @id @default(cuid())
  province  String
  city      String
  latitude  Float?
  longitude Float?
  isActive  Boolean @default(true)

  @@unique([province, city])
  @@map("zimbabwe_locations")
}

model Institution {
  id               String   @id @default(cuid())
  name             String   @unique
  type             String
  city             String
  province         String
  website          String?
  isActive         Boolean  @default(true)
  totalUsers       Int      @default(0)
  totalTournaments Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("institutions")
}

model MobileMoneyProvider {
  id           String  @id @default(cuid())
  name         String  @unique
  code         String  @unique
  isActive     Boolean @default(true)
  minAmount    Float
  maxAmount    Float
  feeStructure Json?

  @@map("mobile_money_providers")
}

model TournamentChatMessage {
  id           String     @id @default(cuid())
  tournamentId String
  userId       String
  text         String
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@index([tournamentId])
  @@map("tournament_chat_messages")
}

model MatchmakingQueue {
  id       String   @id @default(cuid())
  userId   String
  gameType String
  rating   Int
  joinedAt DateTime @default(now())
  status   String   @default("waiting")
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([gameType, rating, joinedAt], map: "idx_queue_skill_matching")
  @@index([gameType, status], map: "idx_queue_status")
  @@index([userId], map: "idx_queue_user")
  @@map("matchmaking_queue")
}

model MatchmakingMetrics {
  id                      String   @id @default(cuid())
  gameType                String
  date                    DateTime @default(now())
  averageWaitTime         Int
  totalMatches            Int      @default(0)
  aiMatches               Int      @default(0)
  humanMatches            Int      @default(0)
  averageRatingDifference Int?
  peakConcurrentUsers     Int      @default(0)

  @@unique([gameType, date], name: "gameType_date")
  @@index([gameType, date], map: "idx_metrics_game_date")
  @@map("matchmaking_metrics")
}

model TournamentEvent {
  id           String     @id @default(cuid())
  tournamentId String
  userId       String
  type         String
  message      String
  metadata     Json?
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation("TournamentEvents", fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation("UserTournamentEvents", fields: [userId], references: [id], onDelete: Cascade)

  @@map("tournament_events")
}

model TournamentHighlight {
  id           String     @id @default(cuid())
  tournamentId String
  userId       String
  achievement  String
  description  String
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation("TournamentHighlights", fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation("UserTournamentHighlights", fields: [userId], references: [id], onDelete: Cascade)

  @@map("tournament_highlights")
}

model TournamentSpectator {
  id           String     @id @default(cuid())
  tournamentId String
  userId       String
  joinedAt     DateTime   @default(now())
  leftAt       DateTime?
  isActive     Boolean    @default(true)
  tournament   Tournament @relation("TournamentSpectators", fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation("UserTournamentSpectators", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId])
  @@map("tournament_spectators")
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String
  activityType String
  description  String
  ipAddress    String?
  userAgent    String?
  metadata     Json?
  createdAt    DateTime @default(now())
  user         User     @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model FlaggedContent {
  id          String    @id @default(cuid())
  contentType String
  contentId   String
  reporterId  String
  reason      String
  severity    String
  status      String
  moderatorId String?
  reviewedAt  DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  moderator   User?     @relation("ContentModerator", fields: [moderatorId], references: [id])
  reporter    User      @relation("ContentReporter", fields: [reporterId], references: [id])

  @@map("flagged_content")
}

model UserModeration {
  id          String    @id @default(cuid())
  userId      String
  moderatorId String
  action      String
  reason      String
  duration    Int?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  moderator   User      @relation("Moderator", fields: [moderatorId], references: [id])
  user        User      @relation("ModeratedUser", fields: [userId], references: [id])

  @@map("user_moderations")
}

model AuditLog {
  id            String   @id @default(cuid())
  userId        String?
  targetType    String
  targetId      String
  action        String
  previousValue Json?
  newValue      Json?
  reason        String?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())
  user          User?    @relation("UserAuditLogs", fields: [userId], references: [id])

  @@map("audit_logs")
}

enum TournamentStatus {
  OPEN
  CLOSED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum BracketType {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
  SWISS
}

enum MatchStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MatchResult {
  PENDING
  PLAYER1_WIN
  PLAYER2_WIN
  DRAW
  FORFEIT
}

enum ChallengeStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum SessionType {
  PRACTICE
  RANKED
  TOURNAMENT
  CASUAL
}

enum AchievementType {
  GAMES_WON
  TOURNAMENTS_WON
  WIN_STREAK
  RATING_MILESTONE
  PARTICIPATION
  SPECIAL
}

enum PaymentType {
  ENTRY_FEE
  PRIZE_PAYOUT
  SUBSCRIPTION
  PURCHASE
  REFUND
  PLATFORM_FEE
  WITHDRAWAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  EXPIRED
}

enum TournamentCategory {
  UNIVERSITY
  CORPORATE
  PUBLIC
  INVITATION_ONLY
}

enum VerificationLevel {
  UNVERIFIED
  PHONE_VERIFIED
  ID_VERIFIED
  INSTITUTION_VERIFIED
}
